# Python 程式設計入門
# 實體物件的建立與使用 （下篇）(完整篇)
""" 
1.類別的兩種用法
2.實體物件建立步驟
3.建立實體
4.使用實體物件
5.實體屬性
6.實體方法
7.使用實體方法
"""
""" .................類別的兩種用法................ """
# 類別的兩種用法
""" 
1.類別與類別屬性 (參考start21~22)
2.類別與實體物件,實體屬性(變數),實體方法(函式)
#概念上1,2是完全不一樣的東西
"""

""" .................實體物件建立步驟................ """
# 實體物件
# 透過類別建立
""" 
1.先 定義類別
2.再透過類別建立 實體物件
"""
# 建立 > 使用
""" 
1.先建立 實體物件
2.才能使用 實體屬性
"""

""" .................建立實體................ """
# 建立實體

# 基本語法
""" 
class 類別名稱:
    #定義初始化函式
    def__init__(self):
        透過操作 self 來定義實體屬性 #固定有self
#建立實體物件，放入變數obj中
obj=類別名稱() #呼叫初始化函式
"""
# 程式範例 (原形)
"""  
#定義初始化函式
class Point:
    def __init__(self):
        self.x=3
        self.y=4
#建立實體物件
#此實體物件包含 x 和 y 兩個實體屬性
p= Point()
"""
# 程式範例 (於物件內加入參數細節)(跟平常建立函式相同)
"""  
#定義初始化函式
class Point:                    #建立類別
    def __init__(self,x,y):     #定義初始化函式
        self.x=x                #建立實體屬性
        self.y=y                #建立實體屬性
#建立實體物件
#建立時，可直接傳入參數資料
p= Point(x,y)
p= Point(1,5)
#p就是建立好的實體物件
"""

""" .................使用實體物件................ """
# 使用實體物件

# 基本語法
""" 
實體物件 . 實體屬性名稱
"""
# 程式範例
""" 
#定義初始化函式
class Point:                    #建立類別
    def __init__(self,x,y):     #定義初始化函式
        self.x=x                #建立實體屬性
        self.y=y                #建立實體屬性
#建立實體物件，並取得實體屬性資料
p= Point(1,5)
#使用實體物件 (p就是建立好的實體物件)
print(p.x+p.y)  #p.x 就是實體物件.實體屬性名稱
"""
# p=實體物件
# x,y=實體屬性



""" .................實體屬性................ """
# 實體屬性
""" 
封裝在實體物件中的 變數
"""
# 程式範例
""" 
#定義初始化函式
class Point:                    #建立類別
    def __init__(self,x,y):     #定義初始化函式
        self.x=x                #建立實體屬性
        self.y=y                #建立實體屬性
#建立實體物件，並取得實體屬性資料
p= Point(1,5)                   #建立實體物件
print(p.x+p.y)                  #使用實體物件與實體屬性
"""
# p=實體物件
# x,y=實體屬性



""" .................實體方法................ """
# 實體方法
""" 封裝在實體物件中的 函式 """
# 基本語法 (基本架構)
""" 
class 類別名稱:
    #定義初始化函式
    def __init__(self):
        定義實體屬性
    定義實體方法/函式  #跟初始化函式相同位置
#建立實體物件，放入變數obj中
obj=類別名稱()
"""
# 基本語法 (更細緻解說)
""" 
class 類別名稱:
    #定義初始化函式
    def __init__(self):
        封裝在實體物件中的變數
    def 方法名稱(self,更多自訂參數):   #self固定參數
        方法主體,透過self操作實體物件
#建立實體物件，放入變數obj中
obj=類別名稱()
"""


""" .................使用實體方法................ """
# 使用實體方法

# 基本語法
""" 
實體物件 . 實體方法名稱(參數資料)   

#因為方法 其實是一個函式 所以對其做一個呼叫動作
#參數資料 視情況填寫或無
"""

# 程式範例
""" 
class Point:                    #建立類別
    def __init__(self,x,y):     #定義初始化函式
        self.x=x                #建立實體屬性
        self.y=y                #建立實體屬性
    def show(self):             #建立實體方法
        print(self.x, self.y)   #這個函式作用的功能

p= Point(1,5)  #建立實體物件
p.show()       #呼叫實體方法
"""

""" .................實體 語系的語感................ """
""" 
#建立類別
#定義初始化函式
#建立實體屬性
#建立實體方法
#函式作用的功能
#建立實體物件
#呼叫實體方法 
"""